lm(mpg~.,mtcars)
lm(mpg~.,mtcars)
R.Version
R.Version()
library(caret)
install.packages("caret")
library(kernlab)
library(caret)
library(ggplot2)
library(lattice)
library(ggplot2)
library(caret)
library(Rcpp)
library(splines)
bsBasis <- bs(training$age,df=3)
library(caret)
library(kernlab)
data(spam)
head(spam)
dim(spam)
inTrain <-  createDataPartition(y=spam$type,p=0.75,list=FALSE)
head(inTrain)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
data(spam)
inTrain <-  createDataPartition(y=spam$type,p=0.75,list=FALSE)
head(inTrain)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
bsBasis <- bs(training$age,df=3)
head(training)
head(training$age)
summary(training)
library(ISLR)
library(caret)
data(Wage)
inTrain <-  createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
head(inTrain)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
library(splines)
bsBasis <- bs(training$age,df=3)
bsBasis
head(bsBasis)
lm1 <-lm(wage ~ bsBasis,data=training)
plot(training$age,training$wage,pch=19,cex=0.5)
points(training$age,predict(lm1,newdata=training),col="red",pch=19,cex=0.5)
predict(bsBasis,age=testing$age)
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type,p=0.75,list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
M <- abs(cor(training[,-58]))   # consider all variables except the outcome; consider all correlations between the variables and take the absolute value
M
diag(M) <- 0
M
which(M > 0.8,arr.ind=T)
dim(M)
which(M>0.8)
31*57+32
names(spam)[c(34,32)]
names(spam)[c(34,32,40)]
plot(spam[,34],spam[,32])
smallSpam <- spam[,c(34,32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1],prComp$x[,2])
prComp$rotation
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1],prComp$x[,2],col=typeColor,xlab="PC1",ylab="PC2")
head(typeColor)
summary(typeColor)
preProc <- preProcess(log10(spam[,58]+1),method="pca",pcaComp=2)
head(preProcess)
head(prePro)
head(preProc)
preProc <- preProcess(log10(spam[,-58]+1),method="pca",pcaComp=2)
spamPC <- predict(preProc,log10(spam[,-58]+1))
plot(spamPC[,1],spamPC[,2],col=typeColor)
modelFit <-train(training$type ~.,method="glm",data=trainPC)
trainPC <- predict(preProc,log10(training[,-58]+1))
modelFit <-train(training$type ~.,method="glm",data=trainPC)
testPC <- predict(preProc,log10(testing[,-58]+1))
confusionMatrix(testing$type,predict(modelFit,testPC))
?predict
head(preProc)
confusionMatrix(testing$type,predict(modelFit,testPC))
modelFit <- train(training$type) ~ .,method="glm",preProcess="pca",data=training)
modelFit <- train(training$type ~ .,method="glm",preProcess="pca",data=training)
confusionMatrix(testing$type,predict(modelFit,testing))
library(caret)
data(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting,p=0.5,list=FALSE)
trainFaith <- faithful[inTrain]
testFaith <- faithful[-inTrain]
head(trainFaith)
trainFaith <- faithful[inTrain,]
testFaith <- faithful[-inTrain,]
head(trainFaith)
lm1 <- lm(eruptions ~ waiting,data=trainFaith)
summary(lm1)
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,lm1$fitted,lwd=3)
coef(lm1)[1] + coef(lm1)[2]*80
newdata <- data.frame(waiting=80)
predict(lm1,newdata)
par(mfrow=c(1,2))
plot(trainFaith$waiting,trainFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(trainFaith$waiting,predict(lm1),lwd=3)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue",xlab="Waiting",ylab="Duration")
lines(testFaith$waiting,predict(lm1,newdata=testFaith),lwd=3)
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum((predict(lm1,newdata=testFaith)-testFaith$eruptions)^2))
pred1 <- predict(lm1,newdata=testFaith,interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting,testFaith$eruptions,pch=19,col="blue")
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty=c(1,1,2),lwd=3)
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty=c(1,1,1),lwd=3)
matlines(testFaith$waiting[ord],pred1[ord,],type="l",col=c(1,2,2),lty=c(1,1,1),lwd=3)
matlines(testFaith$waiting[ord],pred1[ord,],type="l",,col=c(1,2,2),lty=c(1,1,1),lwd=3)
modFit <- train(eruptions ~ waiting,data=trainFaith,method="lm")
summary(modFit$finalModel)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage,select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
qplot(age,wage,data=training)
qplot(age,wage,colour=jobclass,data=training)
qplot(age,wage,colour=education,data=training)
modFit <- train(wage ~ age + jobclass + education,method="lm",data=training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod,1,pch=19,cex=0.5,col="#00000010")
qplot(finMod$fitted,finMod$residuals,colour=race,data=training)
plot(finMod$residuals,pch=19)
mfrow(c(1,1))
pred <- predict(modFit, testing)
qplot(wage,pred,colour=year,data=testing)
modFitAll <- train(wage ~ .,data=traiing,method="lm")
pred <- predict(modFitAll, testing)
qplot(wage,pred,data=testing)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
AlzheimerDisease
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
?AppliedPredictiveModeling
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
AlzheimerDisease
adData = data.frame(predictors)
adData
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
summary(training)
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
predictors
dim(predictors)
dim(diagnosis)
diagnosis
?AlzheimerDisease
head(AlzheimerDisease)
?AlzheimerDisease
head(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(AlzheimerDisease)
adData
head(adData)
dim(adData)
adData = data.frame(predictors)
dim(adData)
head(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training$Superplasticizer
hist(training$Superplasticizer)
par(mfrow=c(1,1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
which(training$Superplasticizer==0)
hist(training$Superplasticizer,10)
hist(log(training$Superplasticizer),10)
hist(training$Superplasticizer,0.01)
hist(log(training$Superplasticizer),0.01)
hist(training$Superplasticizer,0.1)
hist(training$Superplasticizer,100)
hist(log(training$Superplasticizer),100)
hist(training$Superplasticizer,100)
hist(log(training$Superplasticizer+1),100)
log(0)
log(1)
training$Superplasticizer+1
log(training$Superplasticizer+1)
hist(log(training$Superplasticizer+1),100)
hist(training$Superplasticizer,100)
hist(log(training$Superplasticizer+1),100)
hist(training$Superplasticizer,100)
hist(training$Superplasticizer,100)
hist(log(training$Superplasticizer+1),100)
log(1.008)
hist(training$Superplasticizer,20)
hist(log(training$Superplasticizer),20)
hist(training$Superplasticizer,20)
hist(log(training$Superplasticizer+1),20)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
inTrain
summary(training)
names(training)
names(training)
dim(training)
?grep
grep('^IL',x=names(training))
IL <- training[,grep('^IL',x=names(training))]
dim(IL)
?preProcess
preProc <- preProcess(IL,method="pca",thresh=0.9)       # method= ... the chosen method for pre-processing, pcaComp=2 ... to take 2 components of the PCA
preProc <- preProcess(IL,method="pca",thresh=0.9)       # method= ... the chosen method for pre-processing, pcaComp=2 ... to take 2 components of the PCA
preProc <- preProcess(IL,method="pca",thresh=0.9)       # method= ... the chosen method for pre-processing, pcaComp=2 ... to take 2 components of the PCA
preProc <- preProcess(IL,method="pca",thresh=0.9)
preProc$dim
preProc$rotation
preProc <- preProcess(IL,method="pca",thresh=0.5)
preProc$rotation
preProc <- preProcess(IL,method="pca",thresh=0.99)
preProc$rotation
preProc <- preProcess(IL,method="pca",thresh=0.9)
preProc$rotation
dim(training)
names(training)
grep('^IL',x=names(training))
ILtrain <- training[,c(1,grep('^IL',x=names(training)))]
ILtrain
dim(ILtrain)
dim(training)
names(ILtrain)
modelFit <- train(diagnosis ~ ., method="glm",data=ILtrain)
predictions <- predict(modelFit,newdata=testing)
C1 <- confusionMatrix(predictions, tesing$diagnosis)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
C1
C1$overall
C1$overall[1]
?train
modelFit <- train(ILtrain$diagnosis ~ .,method="glm",preProcess="pca",data=ILtrain,trControl=trainControl(preProcOptions=list(thresh=0.8)))
predictions <- predict(modelFit,newdata=testing)
C2 <- confusionMatrix(predictions, testing$diagnosis)
C1
C2
C2$overall[1]
data(iris)
library(ggplot2)
names(iris)
table(iris$Species)
head(iris)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
library(lattice)
library(caret)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width,Sepal.Width,colour=Species,data=training)
modFit <- train(Species ~ .,method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
test(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
text(modFit$finalModel,use.n=TRUE,all=TRUE,cex=0.8)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
predict(modFit,newdata=testing)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(ozone,package="ElemStatLearn")
ozone <- ozone[order(ozone$ozone),]
head(ozone)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)       # create matrix
for(i in 1:10){                         # resample the dataset 10 times
ss <- sample(1:dim(ozone)[1],replace=T)         # each time sample with replacement from the entire dataset
ozone0 <- ozone[ss,]            # create a new dataset which is the resampled dataset for this particular dataset in the loop
ozone0 <- ozone0[order(ozone0$ozone),]  # reorder the dataset by the ozone variable
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <-predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
predictors = data.frame(ozone=ozone$ozone)
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
install.packages("party")
predictors = data.frame(ozone=ozone$ozone)
temperature = ozone$temperature
treebag <- bag(predictors, temperature, B = 10,
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
head(predictors)
head(temperature)
head(ozone)
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
data(iris)
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
library(lattice)
library(caret)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species ~ .,data=training,method="rf",prox=TRUE)
getTree(modFit$finalModel,k=2)          # getTree ... shows a specific tree; k=2 ... means that the second tree should be shown
irisP <- classCenter(training[,c(3,4)], training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP)
irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species,data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred <- predict(modFit,testing)
testing$predRight <- pred==testing$Species
table(pred,testing$Species)
qplot(Petal.Width,Petal.Length,colour=predRight,data=testing,main="newdata Prediction")
library(ISLR)
data(Wage)
library(ggplot2)
library(caret)
library(lattice)
library(caret)
Wage <- subset(Wage,select=-c(logwage))
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
modFit <- train(wage ~ ., method="gbm",data=training,verbose=FALSE)
print(modFit)
qplot(predict(modFit,testing),wage,data=testing)
data(iris)
data(ggplot2)
library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
library(caret)
library(lattice)
library(caret)
inTrain <- createDataPartition(y=iris$Species,p=0.7,list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
kMeans1 <- kmeans(subset(training,select=-c(Species)),centers=3)
training$clusters <- as.factor(kMeans$cluster)
training$clusters <- as.factor(kMeans1$cluster)
qplot(Petal.Width,Petal.Length,colour=clusters,data=training)
table(kMeans1$cluster,training$Species)
modFit <- train(clusters ~ .,data=subset(training,select=-c(Species)),method="rpart")
table(predict(modFit,training),training$Species)
testClusterPred <- predict(modFit,testing)
table(testClusterPred,testing$Species)
library(xts)
library(zoo)
library(IBrokers)
library(zoo)
library(xts)
library(IBrokers)
tws <- twsConnect()
tws
isConnected(tws)
reqCurrentTime(tws)
serverVersion(tws)
calculateImpliedVolatility(tws,"QQQ1506K113",1.23,114)
reqAccountUpdates(tws)
reqContractDetails(tws, twsEquity("QQQ"))
reqContractDetails(tws, tswOption(local="",right="C",symbol="QQQ"))
reqContractDetails(tws, twsOption(local="",right="C",symbol="QQQ"))
head(data)
head(data)
isConnected
library(IBrokers)
tws <- twsConnect()
isConnected(tws)
twsDisconnect(tws)
isConnected(tws)
library(RTools)
install.packages("RTools")
library(RTools)
install.packages("shiny")
y
library(shiny)
R.version()
getwd()
setwd("D/Allerlei/Coursera/R-files/Developing Data Products")
setwd("D/Allerlei/Coursera/R-files")
setwd("D:/Allerlei/Coursera/R-files/Developing Data Products")
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinyapps")
library(shinyapps)
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
library(shiny)
library(shinyapps)
shinyapps::setAccountInfo(name='lehhar',
token='D546D7D90B71EEDAEE482231CA205E89',
secret='5yEdl7n1mJ23KBHSTAPZZqlWOXcfZUox22onF67A')
deployApp()
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
shinyapps::deployApp('D:\Allerlei\Coursera\R-files\Developing Data Products')
shinyapps::deployApp('D:/Allerlei/Coursera/R-files/Developing Data Products')
install.packages("Rtools")
R.version()
R.Version()
shinyapps::setAccountInfo(name='lehhar',
token='D546D7D90B71EEDAEE482231CA205E89',
secret='5yEdl7n1mJ23KBHSTAPZZqlWOXcfZUox22onF67A')
deployApp()
deployApp(appName="APPNAME")
